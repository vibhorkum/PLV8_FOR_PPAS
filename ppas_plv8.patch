diff --git a/expected/plv8.out b/expected/plv8.out
index b1c16c9..5da0fcd 100644
--- a/expected/plv8.out
+++ b/expected/plv8.out
@@ -151,9 +151,9 @@ SELECT date_to_text('23 Dec 2010');
 
 CREATE FUNCTION text_to_date(t text) RETURNS date AS $$ return new Date(t) $$ LANGUAGE plv8;
 SELECT text_to_date('23 Dec 2010 GMT');
- text_to_date 
---------------
- 12-23-2010
+       text_to_date       
+--------------------------
+ Thu Dec 23 00:00:00 2010
 (1 row)
 
 CREATE FUNCTION oidfn(id oid) RETURNS oid AS $$ return id $$ LANGUAGE plv8;
@@ -384,10 +384,10 @@ $$
 $$
 LANGUAGE plv8;
 SELECT test_sql();
-NOTICE:  {"i":1,"s":"s1","c":["pg_catalog","public"]} 1
-NOTICE:  {"i":2,"s":"s2","c":["pg_catalog","public"]} 1
-NOTICE:  {"i":3,"s":"s3","c":["pg_catalog","public"]} 1
-NOTICE:  {"i":4,"s":"s4","c":["pg_catalog","public"]} 1
+NOTICE:  {"i":1,"s":"s1","c":["sys","dbo","pg_catalog","public"]} 1
+NOTICE:  {"i":2,"s":"s2","c":["sys","dbo","pg_catalog","public"]} 1
+NOTICE:  {"i":3,"s":"s3","c":["sys","dbo","pg_catalog","public"]} 1
+NOTICE:  {"i":4,"s":"s4","c":["sys","dbo","pg_catalog","public"]} 1
  test_sql 
 ----------
         4
diff --git a/expected/window.out b/expected/window.out
index 3df346d..db60958 100644
--- a/expected/window.out
+++ b/expected/window.out
@@ -265,33 +265,33 @@ SELECT ntile(3) OVER (w), js_ntile(3) OVER (w) FROM empsalary WINDOW w AS (ORDER
 (10 rows)
 
 SELECT lag(enroll_date) OVER (w), js_lag(enroll_date) OVER (w) FROM empsalary WINDOW w AS (ORDER BY salary);
-    lag     |   js_lag   
-------------+------------
-            | 
- 12-10-2007 | 12-10-2007
- 12-23-2006 | 12-23-2006
- 01-01-2008 | 01-01-2008
- 01-01-2008 | 01-01-2008
- 08-08-2007 | 08-08-2007
- 08-01-2007 | 08-01-2007
- 10-01-2006 | 10-01-2006
- 08-15-2007 | 08-15-2007
- 08-01-2007 | 08-01-2007
+           lag            |          js_lag          
+--------------------------+--------------------------
+                          | 
+ Mon Dec 10 00:00:00 2007 | Mon Dec 10 00:00:00 2007
+ Sat Dec 23 00:00:00 2006 | Sat Dec 23 00:00:00 2006
+ Tue Jan 01 00:00:00 2008 | Tue Jan 01 00:00:00 2008
+ Tue Jan 01 00:00:00 2008 | Tue Jan 01 00:00:00 2008
+ Wed Aug 08 00:00:00 2007 | Wed Aug 08 00:00:00 2007
+ Wed Aug 01 00:00:00 2007 | Wed Aug 01 00:00:00 2007
+ Sun Oct 01 00:00:00 2006 | Sun Oct 01 00:00:00 2006
+ Wed Aug 15 00:00:00 2007 | Wed Aug 15 00:00:00 2007
+ Wed Aug 01 00:00:00 2007 | Wed Aug 01 00:00:00 2007
 (10 rows)
 
 SELECT lead(enroll_date) OVER (w), js_lead(enroll_date) OVER (w) FROM empsalary WINDOW w AS (ORDER BY salary);
-    lead    |  js_lead   
-------------+------------
- 12-23-2006 | 12-23-2006
- 01-01-2008 | 01-01-2008
- 01-01-2008 | 01-01-2008
- 08-08-2007 | 08-08-2007
- 08-01-2007 | 08-01-2007
- 10-01-2006 | 10-01-2006
- 08-15-2007 | 08-15-2007
- 08-01-2007 | 08-01-2007
- 10-01-2006 | 10-01-2006
-            | 
+           lead           |         js_lead          
+--------------------------+--------------------------
+ Sat Dec 23 00:00:00 2006 | Sat Dec 23 00:00:00 2006
+ Tue Jan 01 00:00:00 2008 | Tue Jan 01 00:00:00 2008
+ Tue Jan 01 00:00:00 2008 | Tue Jan 01 00:00:00 2008
+ Wed Aug 08 00:00:00 2007 | Wed Aug 08 00:00:00 2007
+ Wed Aug 01 00:00:00 2007 | Wed Aug 01 00:00:00 2007
+ Sun Oct 01 00:00:00 2006 | Sun Oct 01 00:00:00 2006
+ Wed Aug 15 00:00:00 2007 | Wed Aug 15 00:00:00 2007
+ Wed Aug 01 00:00:00 2007 | Wed Aug 01 00:00:00 2007
+ Sun Oct 01 00:00:00 2006 | Sun Oct 01 00:00:00 2006
+                          | 
 (10 rows)
 
 SELECT first_value(empno) OVER (w ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING),
diff --git a/plv8.cc b/plv8.cc
index c697428..13c22a8 100644
--- a/plv8.cc
+++ b/plv8.cc
@@ -134,7 +134,7 @@ extern const unsigned char livescript_binary_data[];
  */
 static plv8_proc *plv8_get_proc(Oid fn_oid, FunctionCallInfo fcinfo,
 		bool validate, char ***argnames) throw();
-static void plv8_xact_cb(XactEvent event, void *arg);
+static void plv8_xact_cb(XactEvent event, void *arg, bool spl_context);
 
 /*
  * CamelCaseFunctions are C++ functions.
@@ -229,7 +229,7 @@ _PG_init(void)
 }
 
 static void
-plv8_xact_cb(XactEvent event, void *arg)
+plv8_xact_cb(XactEvent event, void *arg, bool spl_context)
 {
 	plv8_exec_env	   *env = exec_env_head;
 
diff --git a/plv8.h b/plv8.h
index 4abb8a4..f339f2d 100644
--- a/plv8.h
+++ b/plv8.h
@@ -15,6 +15,7 @@
 #endif  // ENABLE_DEBUGGER_SUPPORT
 #include <vector>
 
+#define typeid __typeid
 extern "C" {
 #include "postgres.h"
 
@@ -24,6 +25,7 @@ extern "C" {
 #include "utils/tuplestore.h"
 #include "windowapi.h"
 }
+#undef typeid
 
 #ifdef _MSC_VER
 #define __attribute__(what)		__declspec what
diff --git a/plv8_param.cc b/plv8_param.cc
index 714f664..03b42a5 100644
--- a/plv8_param.cc
+++ b/plv8_param.cc
@@ -14,6 +14,7 @@
  */
 #if PG_VERSION_NUM >= 90000
 
+#define typeid __typeid
 extern "C" {
 
 #include "catalog/pg_type.h"
@@ -21,8 +22,7 @@ extern "C" {
 #include "utils/lsyscache.h"
 
 } // extern "C"
-
-
+#undef typeid
 /*
  * In the varparams case, the caller-supplied OID array (if any) can be
  * re-palloc'd larger at need.  A zero array entry means that parameter number
diff --git a/plv8_param.h b/plv8_param.h
index bf53521..fedeb73 100644
--- a/plv8_param.h
+++ b/plv8_param.h
@@ -1,6 +1,7 @@
 #ifndef _PLV8_PARAM_H_
 #define _PLV8_PARAM_H_
 
+#define typeid __typeid
 extern "C" {
 #include "postgres.h"
 
@@ -14,7 +15,7 @@ extern "C" {
 #endif	// PG_VERSION_NUM >= 90000
 
 } // extern "C"
-
+#undef typeid
 /*
  * In variable paramter case for SPI, the type information is filled by
  * the parser in paramTypes and numParams.  MemoryContext should be given
+diff --git a/expected/plv8.out b/expected/plv8.out
+index b1c16c9..68ab115 100644
+--- a/expected/plv8.out
++++ b/expected/plv8.out
+@@ -151,9 +151,9 @@ SELECT date_to_text('23 Dec 2010');
+ 
+ CREATE FUNCTION text_to_date(t text) RETURNS date AS $$ return new Date(t) $$ LANGUAGE plv8;
+ SELECT text_to_date('23 Dec 2010 GMT');
+- text_to_date 
+---------------
+- 12-23-2010
++       text_to_date       
++--------------------------
++ Thu Dec 23 00:00:00 2010
+ (1 row)
+ 
+ CREATE FUNCTION oidfn(id oid) RETURNS oid AS $$ return id $$ LANGUAGE plv8;
+@@ -384,10 +384,10 @@ $$
+ $$
+ LANGUAGE plv8;
+ SELECT test_sql();
+-NOTICE:  {"i":1,"s":"s1","c":["pg_catalog","public"]} 1
+-NOTICE:  {"i":2,"s":"s2","c":["pg_catalog","public"]} 1
+-NOTICE:  {"i":3,"s":"s3","c":["pg_catalog","public"]} 1
+-NOTICE:  {"i":4,"s":"s4","c":["pg_catalog","public"]} 1
++NOTICE:  {"i":1,"s":"s1","c":["sys","dbo","public","pg_catalog"]} 1
++NOTICE:  {"i":2,"s":"s2","c":["sys","dbo","public","pg_catalog"]} 1
++NOTICE:  {"i":3,"s":"s3","c":["sys","dbo","public","pg_catalog"]} 1
++NOTICE:  {"i":4,"s":"s4","c":["sys","dbo","public","pg_catalog"]} 1
+  test_sql 
+ ----------
+         4
+diff --git a/expected/window.out b/expected/window.out
+index 3df346d..db60958 100644
+--- a/expected/window.out
++++ b/expected/window.out
+@@ -265,33 +265,33 @@ SELECT ntile(3) OVER (w), js_ntile(3) OVER (w) FROM empsalary WINDOW w AS (ORDER
+ (10 rows)
+ 
+ SELECT lag(enroll_date) OVER (w), js_lag(enroll_date) OVER (w) FROM empsalary WINDOW w AS (ORDER BY salary);
+-    lag     |   js_lag   
+-------------+------------
+-            | 
+- 12-10-2007 | 12-10-2007
+- 12-23-2006 | 12-23-2006
+- 01-01-2008 | 01-01-2008
+- 01-01-2008 | 01-01-2008
+- 08-08-2007 | 08-08-2007
+- 08-01-2007 | 08-01-2007
+- 10-01-2006 | 10-01-2006
+- 08-15-2007 | 08-15-2007
+- 08-01-2007 | 08-01-2007
++           lag            |          js_lag          
++--------------------------+--------------------------
++                          | 
++ Mon Dec 10 00:00:00 2007 | Mon Dec 10 00:00:00 2007
++ Sat Dec 23 00:00:00 2006 | Sat Dec 23 00:00:00 2006
++ Tue Jan 01 00:00:00 2008 | Tue Jan 01 00:00:00 2008
++ Tue Jan 01 00:00:00 2008 | Tue Jan 01 00:00:00 2008
++ Wed Aug 08 00:00:00 2007 | Wed Aug 08 00:00:00 2007
++ Wed Aug 01 00:00:00 2007 | Wed Aug 01 00:00:00 2007
++ Sun Oct 01 00:00:00 2006 | Sun Oct 01 00:00:00 2006
++ Wed Aug 15 00:00:00 2007 | Wed Aug 15 00:00:00 2007
++ Wed Aug 01 00:00:00 2007 | Wed Aug 01 00:00:00 2007
+ (10 rows)
+ 
+ SELECT lead(enroll_date) OVER (w), js_lead(enroll_date) OVER (w) FROM empsalary WINDOW w AS (ORDER BY salary);
+-    lead    |  js_lead   
+-------------+------------
+- 12-23-2006 | 12-23-2006
+- 01-01-2008 | 01-01-2008
+- 01-01-2008 | 01-01-2008
+- 08-08-2007 | 08-08-2007
+- 08-01-2007 | 08-01-2007
+- 10-01-2006 | 10-01-2006
+- 08-15-2007 | 08-15-2007
+- 08-01-2007 | 08-01-2007
+- 10-01-2006 | 10-01-2006
+-            | 
++           lead           |         js_lead          
++--------------------------+--------------------------
++ Sat Dec 23 00:00:00 2006 | Sat Dec 23 00:00:00 2006
++ Tue Jan 01 00:00:00 2008 | Tue Jan 01 00:00:00 2008
++ Tue Jan 01 00:00:00 2008 | Tue Jan 01 00:00:00 2008
++ Wed Aug 08 00:00:00 2007 | Wed Aug 08 00:00:00 2007
++ Wed Aug 01 00:00:00 2007 | Wed Aug 01 00:00:00 2007
++ Sun Oct 01 00:00:00 2006 | Sun Oct 01 00:00:00 2006
++ Wed Aug 15 00:00:00 2007 | Wed Aug 15 00:00:00 2007
++ Wed Aug 01 00:00:00 2007 | Wed Aug 01 00:00:00 2007
++ Sun Oct 01 00:00:00 2006 | Sun Oct 01 00:00:00 2006
++                          | 
+ (10 rows)
+ 
+ SELECT first_value(empno) OVER (w ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING),
+diff --git a/plv8.cc b/plv8.cc
+index c697428..13c22a8 100644
+--- a/plv8.cc
++++ b/plv8.cc
+@@ -134,7 +134,7 @@ extern const unsigned char livescript_binary_data[];
+  */
+ static plv8_proc *plv8_get_proc(Oid fn_oid, FunctionCallInfo fcinfo,
+ 		bool validate, char ***argnames) throw();
+-static void plv8_xact_cb(XactEvent event, void *arg);
++static void plv8_xact_cb(XactEvent event, void *arg, bool spl_context);
+ 
+ /*
+  * CamelCaseFunctions are C++ functions.
+@@ -229,7 +229,7 @@ _PG_init(void)
+ }
+ 
+ static void
+-plv8_xact_cb(XactEvent event, void *arg)
++plv8_xact_cb(XactEvent event, void *arg, bool spl_context)
+ {
+ 	plv8_exec_env	   *env = exec_env_head;
+ 
+diff --git a/plv8.h b/plv8.h
+index 4abb8a4..f339f2d 100644
+--- a/plv8.h
++++ b/plv8.h
+@@ -15,6 +15,7 @@
+ #endif  // ENABLE_DEBUGGER_SUPPORT
+ #include <vector>
+ 
++#define typeid __typeid
+ extern "C" {
+ #include "postgres.h"
+ 
+@@ -24,6 +25,7 @@ extern "C" {
+ #include "utils/tuplestore.h"
+ #include "windowapi.h"
+ }
++#undef typeid
+ 
+ #ifdef _MSC_VER
+ #define __attribute__(what)		__declspec what
+diff --git a/plv8_param.cc b/plv8_param.cc
+index 714f664..03b42a5 100644
+--- a/plv8_param.cc
++++ b/plv8_param.cc
+@@ -14,6 +14,7 @@
+  */
+ #if PG_VERSION_NUM >= 90000
+ 
++#define typeid __typeid
+ extern "C" {
+ 
+ #include "catalog/pg_type.h"
+@@ -21,8 +22,7 @@ extern "C" {
+ #include "utils/lsyscache.h"
+ 
+ } // extern "C"
+-
+-
++#undef typeid
+ /*
+  * In the varparams case, the caller-supplied OID array (if any) can be
+  * re-palloc'd larger at need.  A zero array entry means that parameter number
+diff --git a/plv8_param.h b/plv8_param.h
+index bf53521..fedeb73 100644
+--- a/plv8_param.h
++++ b/plv8_param.h
+@@ -1,6 +1,7 @@
+ #ifndef _PLV8_PARAM_H_
+ #define _PLV8_PARAM_H_
+ 
++#define typeid __typeid
+ extern "C" {
+ #include "postgres.h"
+ 
+@@ -14,7 +15,7 @@ extern "C" {
+ #endif	// PG_VERSION_NUM >= 90000
+ 
+ } // extern "C"
+-
++#undef typeid
+ /*
+  * In variable paramter case for SPI, the type information is filled by
+  * the parser in paramTypes and numParams.  MemoryContext should be given
